#!/usr/bin/env python

"""
This script processes events generated by the extaction plugin and displays
notifications of these events on the screen.
"""

import os
import sys
import base64
import cgi
import pynotify

def main():
    # Make the parameters saved in enviromental variables easier accessible.
    try:
        event_type = os.environ['EVENT_TYPE']
        # This script can handle only the msg type.
        if event_type != 'msg':
            sys.exit(1)

        #event_network = os.environ['EVENT_NETWORK']
        #event_local_user = os.environ['EVENT_LOCAL_USER']
        event_remote_user = os.environ['EVENT_REMOTE_USER']
        event_message = os.environ['EVENT_MESSAGE']
        #event_message_html = os.environ['EVENT_MESSAGE_HTML']
    except KeyError:
        # Some necessary parameters are missing.
        sys.exit(1)

    if not pynotify.init('Extaction-plugin handler'):
        sys.exit(1)

    title = 'Message from %s:' % event_remote_user
    # event_message is in UTF-8, decode it to Unicode, then select first 256
    # characters and encode them back to UTF-8.
    body = event_message.decode('utf-8')[0:256].encode('utf-8')
    # And escape the '&', '<', '>' characters.
    body = cgi.escape(body)
    n = pynotify.Notification(title, body)
    if os.environ.has_key('EVENT_REMOTE_USER_ICON'):
        # The icon is encoded in base64, decode it first.
        icon_encoded = os.environ['EVENT_REMOTE_USER_ICON']
        icon_decoded = base64.b64decode(icon_encoded)

        # Create a pixbuf loader.
        loader = pynotify.gtk.gdk.PixbufLoader();
        loader.set_size(48, 48);
        loader.write(icon_decoded);
        loader.close()

        # Set icon from the pixbuf.
        pixbuf = loader.get_pixbuf()
        n.set_icon_from_pixbuf(pixbuf)

    # Get the notification on the screen.
    n.show()

    pynotify.uninit()

if __name__ == '__main__':
    main()

# vim: set tabstop=4 shiftwidth=4 textwidth=79 expandtab :
